//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `browser-list-beer-image-placeholder`.
    static let browserListBeerImagePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser-list-beer-image-placeholder")
    /// Image `star-empty`.
    static let starEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "star-empty")
    /// Image `star-filled`.
    static let starFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "star-filled")
    /// Image `tab-beer-browser`.
    static let tabBeerBrowser = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-beer-browser")
    /// Image `tab-favorite-beers`.
    static let tabFavoriteBeers = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-favorite-beers")
    /// Image `tab-random-beer`.
    static let tabRandomBeer = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-random-beer")
    
    /// `UIImage(named: "browser-list-beer-image-placeholder", bundle: ..., traitCollection: ...)`
    static func browserListBeerImagePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browserListBeerImagePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star-empty", bundle: ..., traitCollection: ...)`
    static func starEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star-filled", bundle: ..., traitCollection: ...)`
    static func starFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-beer-browser", bundle: ..., traitCollection: ...)`
    static func tabBeerBrowser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBeerBrowser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-favorite-beers", bundle: ..., traitCollection: ...)`
    static func tabFavoriteBeers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabFavoriteBeers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-random-beer", bundle: ..., traitCollection: ...)`
    static func tabRandomBeer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabRandomBeer, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// en translation: API entity deserialization error
      /// 
      /// Locales: en
      static let error_apiEntityDeserializationError = Rswift.StringResource(key: "error_apiEntityDeserializationError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add a favorite
      /// 
      /// Locales: en
      static let favorite_beers_empty_list_label = Rswift.StringResource(key: "favorite_beers_empty_list_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Connected to Internet
      /// 
      /// Locales: en
      static let network_online_notification = Rswift.StringResource(key: "network_online_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error status code in HTTP response
      /// 
      /// Locales: en
      static let error_httpErrorCode = Rswift.StringResource(key: "error_httpErrorCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Networking error
      /// 
      /// Locales: en
      static let error_networkingError = Rswift.StringResource(key: "error_networkingError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No Internet connection
      /// 
      /// Locales: en
      static let network_offline_notification = Rswift.StringResource(key: "network_offline_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No results
      /// 
      /// Locales: en
      static let beer_browser_searching_no_results_label = Rswift.StringResource(key: "beer_browser_searching_no_results_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not authenticated
      /// 
      /// Locales: en
      static let error_notAuthenticated = Rswift.StringResource(key: "error_notAuthenticated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Punkr
      /// 
      /// Locales: en
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Random
      /// 
      /// Locales: en
      static let random_beer_button_title = Rswift.StringResource(key: "random_beer_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Response: Not Found
      /// 
      /// Locales: en
      static let error_networkResponseNotFound = Rswift.StringResource(key: "error_networkResponseNotFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en
      static let beer_browser_search_bar_placeholder_text = Rswift.StringResource(key: "beer_browser_search_bar_placeholder_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Server error
      /// 
      /// Locales: en
      static let error_serverError = Rswift.StringResource(key: "error_serverError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static let error_generic_error_notification = Rswift.StringResource(key: "error_generic_error_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unexpected HTTP response content type
      /// 
      /// Locales: en
      static let error_unexpectedHTTPResponseContentType = Rswift.StringResource(key: "error_unexpectedHTTPResponseContentType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unexpected HTTP response payload
      /// 
      /// Locales: en
      static let error_unexpectedHTTPResponsePayload = Rswift.StringResource(key: "error_unexpectedHTTPResponsePayload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unknown error
      /// 
      /// Locales: en
      static let error_unknown = Rswift.StringResource(key: "error_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: API entity deserialization error
      /// 
      /// Locales: en
      static func error_apiEntityDeserializationError(_: Void = ()) -> String {
        return NSLocalizedString("error_apiEntityDeserializationError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add a favorite
      /// 
      /// Locales: en
      static func favorite_beers_empty_list_label(_: Void = ()) -> String {
        return NSLocalizedString("favorite_beers_empty_list_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected to Internet
      /// 
      /// Locales: en
      static func network_online_notification(_: Void = ()) -> String {
        return NSLocalizedString("network_online_notification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error status code in HTTP response
      /// 
      /// Locales: en
      static func error_httpErrorCode(_: Void = ()) -> String {
        return NSLocalizedString("error_httpErrorCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Networking error
      /// 
      /// Locales: en
      static func error_networkingError(_: Void = ()) -> String {
        return NSLocalizedString("error_networkingError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Internet connection
      /// 
      /// Locales: en
      static func network_offline_notification(_: Void = ()) -> String {
        return NSLocalizedString("network_offline_notification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No results
      /// 
      /// Locales: en
      static func beer_browser_searching_no_results_label(_: Void = ()) -> String {
        return NSLocalizedString("beer_browser_searching_no_results_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not authenticated
      /// 
      /// Locales: en
      static func error_notAuthenticated(_: Void = ()) -> String {
        return NSLocalizedString("error_notAuthenticated", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Punkr
      /// 
      /// Locales: en
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Random
      /// 
      /// Locales: en
      static func random_beer_button_title(_: Void = ()) -> String {
        return NSLocalizedString("random_beer_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Response: Not Found
      /// 
      /// Locales: en
      static func error_networkResponseNotFound(_: Void = ()) -> String {
        return NSLocalizedString("error_networkResponseNotFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en
      static func beer_browser_search_bar_placeholder_text(_: Void = ()) -> String {
        return NSLocalizedString("beer_browser_search_bar_placeholder_text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Server error
      /// 
      /// Locales: en
      static func error_serverError(_: Void = ()) -> String {
        return NSLocalizedString("error_serverError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static func error_generic_error_notification(_: Void = ()) -> String {
        return NSLocalizedString("error_generic_error_notification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unexpected HTTP response content type
      /// 
      /// Locales: en
      static func error_unexpectedHTTPResponseContentType(_: Void = ()) -> String {
        return NSLocalizedString("error_unexpectedHTTPResponseContentType", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unexpected HTTP response payload
      /// 
      /// Locales: en
      static func error_unexpectedHTTPResponsePayload(_: Void = ()) -> String {
        return NSLocalizedString("error_unexpectedHTTPResponsePayload", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown error
      /// 
      /// Locales: en
      static func error_unknown(_: Void = ()) -> String {
        return NSLocalizedString("error_unknown", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
